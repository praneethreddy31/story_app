// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  role      String   @default("USER") // USER, ADMIN, MODERATOR
  
  // Profile preferences
  preferences String? // Store user preferences as JSON string
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  versions VersionHistory[]
  conversations Conversation[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  genre       String?
  status      String   @default("DRAFT") // DRAFT, IN_PROGRESS, COMPLETE, ARCHIVED
  description String?
  
  // Owner
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sessions    Session[]
  conversations Conversation[]
  
  @@map("projects")
}

model Session {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Session metadata
  title     String?
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  messages  Message[]
  
  @@map("sessions")
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Message content
  content   String
  sender    String   // USER, AI
  metadata  String?  // Store additional metadata as JSON string
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  versions  VersionHistory[]
  
  @@map("messages")
}

model VersionHistory {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  // Version metadata
  content   String
  editType  String   // USER, SYSTEM
  editedBy  String?  // User ID who made the edit
  user      User?    @relation(fields: [editedBy], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("version_history")
}

model Conversation {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  
  // Conversation data
  messages  String   // Store messages as JSON string
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId])
  @@map("conversations")
}
